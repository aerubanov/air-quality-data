AWSTemplateFormatVersion: 2010-09-09
Description: AWS CloudFormation Template to create resources for ETL pipline.
Resources:

  ETLStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: ETLStepFunction
      DefinitionS3Location:
        Bucket: stepfunc-defenition
        Key: StepFunction.asl.json
      RoleArn: !GetAtt StepFunctionRole.Arn
      StateMachineType: STANDARD

  # EXTRACTION
  S3BucketStaging:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref StagingAreaBucketName
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: GlacierRule
            Status: Enabled
            Transitions:
              - StorageClass: STANDARD_IA
                TransitionInDays: 30
              - StorageClass: GLACIER_IR
                TransitionInDays: 90
    DeletionPolicy: Retain
  
  Indexer:
    Type: AWS::Lambda::Function
    Properties:
      Description: Build file index to upload files from FTP server
      FunctionName: indexer
      Code: 
        ImageUri: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/indexer:latest'
      MemorySize: 512
      PackageType: Image
      Role: !GetAtt 'DynamoDBLambdaRole.Arn'
      Timeout: 600

  ListFiles:
    Type: AWS::Lambda::Function
    Properties:
      Description: List files from FTP server
      FunctionName: list-files
      Code: 
        ImageUri: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/list-files:latest'
      MemorySize: 512
      PackageType: Image
      Role: !GetAtt 'DynamoDBS3LambdaRole.Arn'
      Timeout: 300
      Environment:
        Variables:
          S3_BUCKET: !Ref StagingAreaBucketName

  Loader:
    Type: AWS::Lambda::Function
    Properties:
      Description: Load files from FTP server to S3 bucket
      FunctionName: loader
      Code: 
        ImageUri: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/loader:latest'
      MemorySize: 512
      PackageType: Image
      Role: !GetAtt 'S3LambdaRole.Arn'
      Timeout: 900
      Environment:
        Variables:
          S3_BUCKET: !Ref StagingAreaBucketName

  IndexMarker:
    Type: AWS::Lambda::Function
    Properties:
      Description: Mark folders in DynamoDB index as procesed
      FunctionName: index-marker
      Code: 
        ImageUri: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/index-marker:latest'
      MemorySize: 512
      PackageType: Image
      Role: !GetAtt 'DynamoDBS3LambdaRole.Arn'
      Timeout: 60

  S3LambdaRole:      
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
              - lambda.amazonaws.com
            Action: 
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: S3write
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "ListObjectsInBucket"
                Effect: Allow
                Action: 
                  - 's3:ListBucket'
                Resource: 
                  - !Sub 'arn:aws:s3:::${StagingAreaBucketName}'
                  - !Sub 'arn:aws:s3:::${TransformationBucketName}'
              - Sid: "AllObjectActions"
                Effect: Allow
                Action: 
                  - 's3:*Object'
                Resource: 
                  - !Sub 'arn:aws:s3:::${StagingAreaBucketName}/*'
                  - !Sub 'arn:aws:s3:::${TransformationBucketName}/*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      RoleName: S3LambdaRole

  DynamoDBLambdaRole:      
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
              - lambda.amazonaws.com
            Action: 
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: DynamoDBwrite
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/folders'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      RoleName: DynamoDBLambdaRole

  DynamoDBS3LambdaRole:      
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
              - lambda.amazonaws.com
            Action: 
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: S3write
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "ListObjectsInBucket"
                Effect: Allow
                Action:
                  - 's3:ListBucket'
                Resource:
                  - !Sub 'arn:aws:s3:::${StagingAreaBucketName}'
              - Sid: "AllObjectActions"
                Effect: Allow
                Action:
                  - 's3:*Object'
                Resource:
                  - !Sub 'arn:aws:s3:::${StagingAreaBucketName}/*'
        - PolicyName: DynamoDBwrite
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/folders'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      RoleName: DynamoDBS3LambdaRole

  EventRule0:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      Name: indexer-schedule
      ScheduleExpression: rate(24 hours)
      State: DISABLED
      Targets:
        - Id: Id83555565-723e-46d3-b5b5-39af9f7b23c7
          Arn: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:indexer'

  # Dynamo DB index table
  folders:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      KeySchema:
        - AttributeName: folder
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: folder
          AttributeType: S
      GlobalSecondaryIndexes: []
      BillingMode: PROVISIONED
      TableName: folders
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  TablefoldersReadCapacityScalableTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    DependsOn: folders
    Properties:
      ServiceNamespace: dynamodb
      ResourceId: table/folders
      ScalableDimension: 'dynamodb:table:ReadCapacityUnits'
      MinCapacity: 1
      MaxCapacity: 10
      RoleARN: !Sub >-
        arn:aws:iam::${AWS::AccountId}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable
  TablefoldersReadCapacityScalingPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    DependsOn: TablefoldersReadCapacityScalableTarget
    Properties:
      ServiceNamespace: dynamodb
      ResourceId: table/folders
      ScalableDimension: 'dynamodb:table:ReadCapacityUnits'
      PolicyName: folders-read-capacity-scaling-policy
      PolicyType: TargetTrackingScaling
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization
        ScaleOutCooldown: 60
        ScaleInCooldown: 60
        TargetValue: 70
  TablefoldersWriteCapacityScalableTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    DependsOn: folders
    Properties:
      ServiceNamespace: dynamodb
      ResourceId: table/folders
      ScalableDimension: 'dynamodb:table:WriteCapacityUnits'
      MinCapacity: 1
      MaxCapacity: 10
      RoleARN: !Sub >-
        arn:aws:iam::${AWS::AccountId}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable
  TablefoldersWriteCapacityScalingPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    DependsOn: TablefoldersWriteCapacityScalableTarget
    Properties:
      ServiceNamespace: dynamodb
      ResourceId: table/folders
      ScalableDimension: 'dynamodb:table:WriteCapacityUnits'
      PolicyName: folders-write-capacity-scaling-policy
      PolicyType: TargetTrackingScaling
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization
        ScaleOutCooldown: 60
        ScaleInCooldown: 60
        TargetValue: 70

  StepFunctionRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
              - states.amazonaws.com
            Action: 
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: DynamoDBFullAcces
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/folders'
        - PolicyName: InvokeLambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:  
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'
        - PolicyName: S3FullAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "ListObjectsInBucket"
                Effect: Allow
                Action: 
                  - 's3:ListBucket'
                Resource: 
                  - !Sub 'arn:aws:s3:::${StagingAreaBucketName}'
                  - !Sub 'arn:aws:s3:::${TransformationBucketName}'
              - Sid: "AllObjectActions"
                Effect: Allow
                Action: 
                  - 's3:*Object'
                Resource: 
                  - !Sub 'arn:aws:s3:::${StagingAreaBucketName}/*'
                  - !Sub 'arn:aws:s3:::${TransformationBucketName}/*'
        - PolicyName: StepFunctionStartExecution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                  - states:StopSyncExecution
                Resource: !Sub 'arn:aws:states:*:${AWS::AccountId}:stateMachine:*'

  #TRANSFORMATION
  S3BucketTransformation:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref TransformationBucketName
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
      LifecycleConfiguration:
        Rules:
          - Id: ExpirationRule
            Status: Enabled
            ExpirationInDays: 30
    DeletionPolicy: Retain

  DataProcessor:
    Type: AWS::Lambda::Function
    Properties:
      Description: Process sensor measurements data
      FunctionName: data-processor
      Code: 
        ImageUri: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/data-processor:latest
      MemorySize: 512
      PackageType: Image
      Role: !GetAtt 'S3LambdaRole.Arn'
      Timeout: 600
      Environment:
        Variables:
          SOURCE_BUCKET: !Ref StagingAreaBucketName
          TARGET_BUCKET: !Ref TransformationBucketName

  LocationProcessor:
    Type: AWS::Lambda::Function
    Properties:
      Description: Process location data
      FunctionName: location-processor
      Code: 
        ImageUri: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/location-processor:latest
      MemorySize: 512
      PackageType: Image
      Role: !GetAtt 'S3LambdaRole.Arn'
      Timeout: 600
      Environment:
        Variables:
          SOURCE_BUCKET: !Ref StagingAreaBucketName
          TARGET_BUCKET: !Ref TransformationBucketName

  FileMover:
    Type: AWS::Lambda::Function
    Properties:
      Description: Move files
      FunctionName: file-mover
      Code: 
        ImageUri: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/file-mover:latest
      MemorySize: 512
      PackageType: Image
      Role: !GetAtt 'S3LambdaRole.Arn'
      Timeout: 600
      Environment:
        Variables:
          S3_BUCKET: !Ref StagingAreaBucketName

  #AWS AURORA DATABASE
  DBCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBClusterIdentifier: aurora-cluster
      Engine: aurora-postgresql
      EngineMode: serverless
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      ScalingConfiguration:
        AutoPause: true
        MinCapacity: 2
        MaxCapacity: 8
        SecondsUntilAutoPause: 300
      EnableHttpEndpoint: true

  AuroraSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: aurora-secret
      SecretString: !Sub
        - '{"username": "${User}", "password": "${Pass}"}'
        - User: !Ref DBUsername
          Pass: !Ref DBPassword
  
  SecretAuroraAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId:
        Ref: AuroraSecret
      TargetId:
        Ref: DBCluster
      TargetType: AWS::RDS::DBCluster

  S3AuroraRole:
    Type: AWS::IAM::Role
    DependsOn:
      - DBCluster
      - AuroraSecret
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
              - lambda.amazonaws.com
            Action: 
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AuroraFullAcces
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'rds-data:BatchExecuteStatement'
                  - 'rds-data:ExecuteStatement'
                  - 'rds-data:BeginTransaction'
                  - 'rds-data:CommitTransaction'
                  - 'rds-data:RollbackTransaction'
                Resource:
                  - !Sub 'arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:aurora-cluster'
        - PolicyName: DBSecreatAcces
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: 
                  - !GetAtt 'AuroraSecret.Id'
        - PolicyName: S3write
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "ListObjectsInBucket"
                Effect: Allow
                Action: 
                  - 's3:ListBucket'
                Resource: 
                  - !Sub 'arn:aws:s3:::${TransformationBucketName}'
              - Sid: "AllObjectActions"
                Effect: Allow
                Action: 
                  - 's3:*Object'
                Resource: 
                  - !Sub 'arn:aws:s3:::${TransformationBucketName}/*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # LOADING
  FactLoader:
    Type: AWS::Lambda::Function
    Properties:
      Description: Load fact data
      FunctionName: fact-loader
      Code: 
        ImageUri: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/fact-loader:latest'
      MemorySize: 512
      PackageType: Image
      Role: !GetAtt 'S3AuroraRole.Arn'
      Timeout: 100
      Environment:
        Variables:
          S3_BUCKET: !Ref TransformationBucketName

  DimensionLoader:
    Type: AWS::Lambda::Function
    Properties:
      Description: Load dimension data
      FunctionName: dimension-loader
      Code: 
        ImageUri: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/dimension-loader:latest'
      MemorySize: 512
      PackageType: Image
      Role: !GetAtt 'S3AuroraRole.Arn'
      Timeout: 100
      Environment:
        Variables:
          S3_BUCKET: !Ref TransformationBucketName

Outputs:
  StagingBucketName:
    Value: !Ref S3BucketStaging
    Description: Name of the staging ares s3 bucket.

Parameters:
  DBUsername:
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: Password MySQL database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  StagingAreaBucketName:
    Description: Name of the staging ares s3 bucket.
    Type: String
    MinLength: '3'
    MaxLength: '63'
    Default: 'staging-area-bucket'
  TransformationBucketName:
    Description: Name of the transformation s3 bucket.
    Type: String
    MinLength: '3'
    MaxLength: '63'
    Default: 'transformed-bucket'
